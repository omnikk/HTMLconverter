import pandas as pd
import re
from pathlib import Path

class FinalCourseGenerator:
    def __init__(self, template_path, data_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            template_path (str): –ü—É—Ç—å –∫ HTML —à–∞–±–ª–æ–Ω—É
            data_path (str): –ü—É—Ç—å –∫ CSV/Excel —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        self.template_path = template_path
        self.data_path = data_path
        self.template_content = ""
        self.courses_data = []
        
    def load_template(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω"""
        with open(self.template_path, 'r', encoding='utf-8') as file:
            self.template_content = file.read()
        print(f"‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {self.template_path}")
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV/Excel"""
        file_extension = Path(self.data_path).suffix.lower()
        
        if file_extension == '.csv':
            df = pd.read_csv(self.data_path, encoding='utf-8')
        elif file_extension in ['.xlsx', '.xls']:
            df = pd.read_excel(self.data_path)
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ Excel —Ñ–∞–π–ª—ã")
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.data_path}")
        print(f"üìä –°—Ç—Ä–æ–∫: {len(df)}, –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        
        return df
    
    def process_data(self, df):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –∫—É—Ä—Å–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ-null –∑–Ω–∞—á–µ–Ω–∏–µ)
        direction = df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].dropna().iloc[0] if not df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].dropna().empty else "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É—Ä—Å—ã
        courses = []
        current_course = None
        
        for _, row in df.iterrows():
            course_name = row['–ö—É—Ä—Å']
            hours = row['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á)']
            skill = row['–ù–∞–≤—ã–∫']
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∏ —á–∞—Å—ã - —ç—Ç–æ –Ω–æ–≤—ã–π –∫—É—Ä—Å
            if pd.notna(course_name) and pd.notna(hours):
                current_course = {
                    'name': course_name,
                    'hours': int(hours),
                    'skills': [skill] if pd.notna(skill) else []
                }
                courses.append(current_course)
            # –ò–Ω–∞—á–µ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
            elif current_course and pd.notna(skill):
                current_course['skills'].append(skill)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        total_hours = sum(course['hours'] for course in courses)
        
        self.courses_data = {
            'direction': direction,
            'total_hours': total_hours,
            'courses': courses
        }
        
        print(f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
        print(f"‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_hours} —á–∞—Å–æ–≤")
        print(f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤: {len(courses)}")
        
        return self.courses_data
    
    def generate_course_html(self, course):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
        # –ù–û–í–û–ï –£–°–õ–û–í–ò–ï: –ï—Å–ª–∏ —É –∫—É—Ä—Å–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –Ω–∞–≤—ã–∫ –∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞,
        # —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –±–ª–æ–∫
        has_dropdown = True
        if len(course['skills']) == 1 and course['skills'][0].strip() == course['name'].strip():
            has_dropdown = False
            print(f"‚ö†Ô∏è –ö—É—Ä—Å '{course['name']}' - –Ω–∞–≤—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —É–±–∏—Ä–∞–µ–º —Ä–∞—Å–∫—Ä—ã–≤–∞—à–∫—É")
        
        if has_dropdown:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
            skills_html = ""
            for skill in course['skills']:
                skills_html += f'<li>{skill}</li>'
            
            # –ö—É—Ä—Å —Å —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–º—Å—è –±–ª–æ–∫–æ–º
            course_html = f'''<li class="program__item program__accordion"><div class="program__accordion-button js-accordion-button"><div class="program__item-row"><span class="tag tag_blue-gray">{course['hours']} —á–∞—Å–æ–≤</span><div class="program__item-title">{course['name']}</div></div><div class="program__item-icon"><svg fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"> <path clip-rule="evenodd" d="M18.5879 9.46761C18.792 9.67198 18.9067 9.94902 18.9067 10.2379C18.9067 10.5267 18.792 10.8037 18.5879 11.0081L12.7747 16.8213C12.5703 17.0254 12.2933 17.1401 12.0044 17.1401C11.7156 17.1401 11.4386 17.0254 11.2342 16.8213L5.42101 11.0081C5.31392 10.9083 5.22803 10.788 5.16845 10.6543C5.10888 10.5206 5.07685 10.3762 5.07427 10.2299C5.07168 10.0835 5.09861 9.93818 5.15343 9.80245C5.20825 9.66673 5.28984 9.54345 5.39334 9.43994C5.49684 9.33644 5.62013 9.25485 5.75585 9.20003C5.89157 9.14521 6.03695 9.11828 6.1833 9.12087C6.32965 9.12345 6.47398 9.15548 6.60768 9.21506C6.74139 9.27463 6.86172 9.36052 6.96151 9.46761L12.0044 14.5106L17.0474 9.46761C17.2518 9.2635 17.5288 9.14885 17.8176 9.14885C18.1065 9.14885 18.3835 9.2635 18.5879 9.46761Z" fill="#3C3E41" fill-rule="evenodd"></path> </svg></div></div><div class="program__accordion-content js-accordion-content"><div class="program__accordion-inner"><ul class="list">{skills_html}</ul></div></div></li>'''
        else:
            # –ö—É—Ä—Å –ë–ï–ó —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–≥–æ—Å—è –±–ª–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —á–∞—Å—ã)
            course_html = f'''<li class="program__item"><div class="program__item-row"><span class="tag tag_blue-gray">{course['hours']} —á–∞—Å–æ–≤</span><div class="program__item-title">{course['name']}</div></div></li>'''
        
        return course_html
    
    def replace_placeholders(self):
        """–ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        html_content = self.template_content
        
        # 1. –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        html_content = html_content.replace(
            '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ&quot;–Ø–Ω–¥–µ–∫—Å –ì—Ä–µ–π–¥&quot;',
            f'{self.courses_data["direction"]} "–Ø–Ω–¥–µ–∫—Å –ì—Ä–µ–π–¥"'
        )
        
        # 2. –ó–∞–º–µ–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        html_content = html_content.replace(
            '–°—É–º–º –ø–æ —Å—Ç–æ–ª–±—Ü—É &quot;–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á)&quot;',
            f'{self.courses_data["total_hours"]} —á–∞—Å–æ–≤'
        )
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
        courses_html = ""
        for course in self.courses_data['courses']:
            courses_html += self.generate_course_html(course)
        
        # 4. –ü–û–õ–ù–ê–Ø –∑–∞–º–µ–Ω–∞ –±–ª–æ–∫–∞ –∫—É—Ä—Å–æ–≤
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∫—É—Ä—Å–æ–≤
        start_marker = '<ul class="program__list">'
        end_marker = '</ul></div></div></section>'
        
        start_pos = html_content.find(start_marker)
        if start_pos == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å –∫—É—Ä—Å–∞–º–∏ –≤ —à–∞–±–ª–æ–Ω–µ")
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –≤—Å–µ–≥–æ –±–ª–æ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è
        end_pos = html_content.find(end_marker, start_pos)
        if end_pos == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è")
        
        # –ó–∞–º–µ–Ω—è–µ–º –í–ï–°–¨ –±–ª–æ–∫ –æ—Ç <ul class="program__list"> –¥–æ </ul></div></div></section>
        new_program_block = f'{start_marker}{courses_html}</ul></div></div></section>'
        
        new_content = (
            html_content[:start_pos] +
            new_program_block +
            html_content[end_pos + len(end_marker):]
        )
        
        return new_content
    
    def generate(self, output_path=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é HTML...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        self.load_template()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.load_data()
        self.process_data(df)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        final_html = self.replace_placeholders()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if output_path:
            with open(output_path, 'w', encoding='utf-8') as file:
                file.write(final_html)
            print(f"‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        return final_html
    
    def debug_template_structure(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∞–±–ª–æ–Ω–∞"""
        self.load_template()
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –±–ª–æ–∫–∏
        program_list_start = self.template_content.find('<ul class="program__list">')
        program_list_end = self.template_content.find('</ul>', program_list_start)
        
        print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∞–±–ª–æ–Ω–∞:")
        print(f"–ü–æ–∑–∏—Ü–∏—è <ul class=\"program__list\">: {program_list_start}")
        print(f"–ü–æ–∑–∏—Ü–∏—è </ul>: {program_list_end}")
        
        if program_list_start != -1 and program_list_end != -1:
            courses_block = self.template_content[program_list_start:program_list_end + 5]
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∫—É—Ä—Å–æ–≤ ({len(courses_block)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print(courses_block[:200] + "..." if len(courses_block) > 200 else courses_block)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    template_file = "html.html"  # –í–∞—à –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    data_file = "data.csv"  # CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    output_file = "perfect_result.html"  # –†–µ–∑—É–ª—å—Ç–∞—Ç
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = FinalCourseGenerator(template_file, data_file)
        
        # –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞...")
        generator.debug_template_structure()
        print()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
        result_html = generator.generate(output_file)
        
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
        print("‚úÖ –ü–æ—Å—á–∏—Ç–∞–Ω–∞ –æ–±—â–∞—è —Å—É–º–º–∞ —á–∞—Å–æ–≤")
        print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –∫—É—Ä—Å—ã —Å —É–º–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞–º–∏")
        print("‚úÖ –ö—É—Ä—Å—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –±–µ–∑ —Ä–∞—Å–∫—Ä—ã–≤–∞—à–∫–∏")
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∏–∂–Ω–∏—Ö —Å–µ–∫—Ü–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def generate_perfect_course_page(template_path, data_path, output_path):
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä—Å–∞"""
    generator = FinalCourseGenerator(template_path, data_path)
    return generator.generate(output_path)